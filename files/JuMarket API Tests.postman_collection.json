{
	"info": {
		"_postman_id": "59b69976-b478-4076-aa1a-9b254154f7fe",
		"name": "JuMarket API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28043914"
	},
	"item": [
		{
			"name": "Customer",
			"item": [
				{
					"name": "saveCustomer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.email).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email is not in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"CPF is a valid Brazilian CPF number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const cpf = responseData.cpf;\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(cpf).to.match(/^\\d{11}$/, \"CPF is not valid\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"fullAddress is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.fullAddress).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{       \r\n    \"name\": \"Cliente Fiel\",\r\n    \"surName\": \"da Ju\",\r\n    \"cpf\": \"92828020002\",\r\n    \"email\": \"cliente@email.com\",\r\n    \"password\": \"segredo\",\r\n    \"zipCode\": \"389099\",\r\n    \"fullAddress\": \"Rua das jaguatiricas, 202\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/customer",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCustomerByCpf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"CPF is in valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.cpf).to.match(/^\\d{11}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/customer/cpf?cpf=92828020002",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"customer",
								"cpf"
							],
							"query": [
								{
									"key": "cpf",
									"value": "92828020002"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCustomerByEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"CPF is a valid Brazilian CPF number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.cpf).to.match(/^\\d{11}$/, \"CPF is not in the correct format\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/customer/email?email=cliente@email.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"customer",
								"email"
							],
							"query": [
								{
									"key": "email",
									"value": "cliente@email.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delCustomerByCPF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/customer?cpf=92828020002",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"customer"
							],
							"query": [
								{
									"key": "cpf",
									"value": "92828020002"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "saveCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name field is required\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.name).to.exist.and.to.have.lengthOf.at.least(1, \"Name field is required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name field is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{       \r\n    \"name\": \"Doces e balas\"   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/category",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCatByName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"admin\",\r\n    \"password\": \"jonas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/category?name=doces",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"category"
							],
							"query": [
								{
									"key": "name",
									"value": "",
									"description": "empty getAll()",
									"disabled": true
								},
								{
									"key": "name",
									"value": "doces"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/category?id=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"category"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "saveProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.barCode).to.exist;\r",
									"    pm.expect(responseData.name).to.exist;\r",
									"    pm.expect(responseData.measurementUnit).to.exist;\r",
									"    pm.expect(responseData.price).to.exist;\r",
									"    pm.expect(responseData.stock).to.exist;\r",
									"    pm.expect(responseData.categoryId).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"barCode is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.barCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Price is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.price).to.be.a('number');\r",
									"    pm.expect(responseData.price).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Stock is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.stock).to.be.a('number');\r",
									"    pm.expect(responseData.stock).to.be.at.least(0, \"Stock should be a non-negative integer\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{       \r\n    \"barcode\": \"012345\",\r\n    \"name\": \"Chocolate a granel\",\r\n    \"measurementUnit\": \"KG\",\r\n    \"price\": 21,\r\n    \"stock\": 150.5,\r\n    \"categoryId\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "getProductbyName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/product/name?name=choc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"product",
								"name"
							],
							"query": [
								{
									"key": "name",
									"value": "choc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getProductbyBarcode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.barCode).to.exist;\r",
									"    pm.expect(responseData.name).to.exist;\r",
									"    pm.expect(responseData.measurementUnit).to.exist;\r",
									"    pm.expect(responseData.price).to.exist;\r",
									"    pm.expect(responseData.stock).to.exist;\r",
									"    pm.expect(responseData.categoryId).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"barCode should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.barCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"barCode should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Price should be a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.price).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Stock should be a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.stock).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categoryId is a positive integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.categoryId).to.be.a('number').and.to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/product/barcode?barcode=012345",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"product",
								"barcode"
							],
							"query": [
								{
									"key": "barcode",
									"value": "012345"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getProductbyCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"barCode is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (product) {\r",
									"        pm.expect(product.barCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Price is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (product) {\r",
									"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/product/category?category=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"product",
								"category"
							],
							"query": [
								{
									"key": "category",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "updateProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"barCode is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.barCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Price should be a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.price).to.be.a('number');\r",
									"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be non-negative\");\r",
									"});\r",
									"\r",
									"pm.test(\"categoryId is a positive integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.categoryId).to.be.a('number');\r",
									"    pm.expect(responseData.categoryId).to.be.above(0, \"categoryId should be a positive integer\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{       \r\n    \"barcode\": \"012345\",\r\n    \"name\": \"Chocolate a granel\",\r\n    \"measurementUnit\": \"KG\",\r\n    \"price\": 22,\r\n    \"stock\": 100,\r\n    \"categoryId\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/product?barcode=012345",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"product"
							],
							"query": [
								{
									"key": "barcode",
									"value": "012345"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteProdbyBarcode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/product?barcode=012345",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"product"
							],
							"query": [
								{
									"key": "barcode",
									"value": "012345"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ShoppingCart",
			"item": [
				{
					"name": "addProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"productQuantity is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.productQuantity).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.productQuantity).to.be.at.least(0, \"Value should be non-negative\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{       \r\n    \"barcode\": \"012345\",\r\n    \"quantity\" : 10.45\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/shopping-cart",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"shopping-cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "delProduct",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/shopping-cart?id=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"shopping-cart"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "checkout",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/shopping-cart?cpf=92828020002&payment=PIX",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"shopping-cart"
							],
							"query": [
								{
									"key": "cpf",
									"value": "92828020002"
								},
								{
									"key": "payment",
									"value": "PIX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Product quantity is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.productQuantity).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/shopping-cart",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"shopping-cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SalesReport",
			"item": [
				{
					"name": "getAllSales",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/sale",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "getSaleByID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/sale/id?id=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"sale",
								"id"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getSaleByCustomer",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/sale/customer?cpf=92828020002",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"sale",
								"customer"
							],
							"query": [
								{
									"key": "cpf",
									"value": "92828020002"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getByTimeInterval",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/sale/time?fromTime=2023-07-23T00:00:00&toTime=2023-07-23T23:59:59",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"sale",
								"time"
							],
							"query": [
								{
									"key": "fromTime",
									"value": "2023-07-23T00:00:00"
								},
								{
									"key": "toTime",
									"value": "2023-07-23T23:59:59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getByPaymentMethod",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/sale/payment?paymentMethod=PIX",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"sale",
								"payment"
							],
							"query": [
								{
									"key": "paymentMethod",
									"value": "PIX"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}